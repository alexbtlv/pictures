//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap(Locale.init) ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)
  
  static func validate() throws {
    try intern.validate()
  }
  
  /// This `R.image` struct is generated, and contains static references to 1 images.
  struct image {
    /// Image `placeholder`.
    static let placeholder = Rswift.ImageResource(bundle: R.hostingBundle, name: "placeholder")
    
    /// `UIImage(named: "placeholder", bundle: ..., traitCollection: ...)`
    static func placeholder(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.placeholder, compatibleWith: traitCollection)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.nib` struct is generated, and contains static references to 1 nibs.
  struct nib {
    /// Nib `PhotoTableViewCell`.
    static let photoTableViewCell = _R.nib._PhotoTableViewCell()
    
    /// `UINib(name: "PhotoTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.photoTableViewCell) instead")
    static func photoTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.photoTableViewCell)
    }
    
    static func photoTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PhotoTableViewCell? {
      return R.nib.photoTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PhotoTableViewCell
    }
    
    fileprivate init() {}
  }
  
  /// This `R.storyboard` struct is generated, and contains static references to 4 storyboards.
  struct storyboard {
    /// Storyboard `Auth`.
    static let auth = _R.storyboard.auth()
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `Load`.
    static let load = _R.storyboard.load()
    /// Storyboard `Main`.
    static let main = _R.storyboard.main()
    
    /// `UIStoryboard(name: "Auth", bundle: ...)`
    static func auth(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.auth)
    }
    
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    
    /// `UIStoryboard(name: "Load", bundle: ...)`
    static func load(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.load)
    }
    
    /// `UIStoryboard(name: "Main", bundle: ...)`
    static func main(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.main)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.string` struct is generated, and contains static references to 1 localization tables.
  struct string {
    /// This `R.string.localizable` struct is generated, and contains static references to 5 localization keys.
    struct localizable {
      /// Value: Email
      static let emailWord = Rswift.StringResource(key: "Email.Word", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Loading...
      static let loadingTitle = Rswift.StringResource(key: "Loading.Title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Login
      static let loginWord = Rswift.StringResource(key: "Login.Word", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Password
      static let passwordWord = Rswift.StringResource(key: "Password.Word", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Please enter any valid email and passowrd of at least 6 any characters
      static let authTip = Rswift.StringResource(key: "Auth.Tip", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      
      /// Value: Email
      static func emailWord(_: Void = ()) -> String {
        return NSLocalizedString("Email.Word", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Loading...
      static func loadingTitle(_: Void = ()) -> String {
        return NSLocalizedString("Loading.Title", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Login
      static func loginWord(_: Void = ()) -> String {
        return NSLocalizedString("Login.Word", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Password
      static func passwordWord(_: Void = ()) -> String {
        return NSLocalizedString("Password.Word", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Please enter any valid email and passowrd of at least 6 any characters
      static func authTip(_: Void = ()) -> String {
        return NSLocalizedString("Auth.Tip", bundle: R.hostingBundle, comment: "")
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }
    
    fileprivate init() {}
  }
  
  fileprivate class Class {}
  
  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    try storyboard.validate()
  }
  
  struct nib {
    struct _PhotoTableViewCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "PhotoTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PhotoTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PhotoTableViewCell
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      try auth.validate()
      try launchScreen.validate()
      try load.validate()
      try main.validate()
    }
    
    struct auth: Rswift.StoryboardResourceType, Rswift.Validatable {
      let authorizationViewController = StoryboardViewControllerResource<AuthorizationViewController>(identifier: "AuthorizationViewController")
      let bundle = R.hostingBundle
      let name = "Auth"
      
      func authorizationViewController(_: Void = ()) -> AuthorizationViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: authorizationViewController)
      }
      
      static func validate() throws {
        if #available(iOS 11.0, *) {
        }
        if _R.storyboard.auth().authorizationViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'authorizationViewController' could not be loaded from storyboard 'Auth' as 'AuthorizationViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController
      
      let bundle = R.hostingBundle
      let name = "LaunchScreen"
      
      static func validate() throws {
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct load: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = CustomNavigationController
      
      let bundle = R.hostingBundle
      let loadingViewController = StoryboardViewControllerResource<LoadingViewController>(identifier: "LoadingViewController")
      let name = "Load"
      
      func loadingViewController(_: Void = ()) -> LoadingViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: loadingViewController)
      }
      
      static func validate() throws {
        if #available(iOS 11.0, *) {
        }
        if _R.storyboard.load().loadingViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'loadingViewController' could not be loaded from storyboard 'Load' as 'LoadingViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct main: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let mainViewController = StoryboardViewControllerResource<MainViewController>(identifier: "MainViewController")
      let name = "Main"
      
      func mainViewController(_: Void = ()) -> MainViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: mainViewController)
      }
      
      static func validate() throws {
        if #available(iOS 11.0, *) {
        }
        if _R.storyboard.main().mainViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'mainViewController' could not be loaded from storyboard 'Main' as 'MainViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate init() {}
}
